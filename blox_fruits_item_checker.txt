-- === Blox Fruits: Fighting Style Finder + Stats & Weapons ===

-- Console logger
local function makeLogger()
    local useRcon = false
    if rconsolecreate and rconsoleprint then
        pcall(function() rconsolecreate("Blox Fruits - Melee Finder"); useRcon = true end)
        pcall(function() if rconsoleclear then rconsoleclear() end end)
    end
    return function(msg, typ)
        typ = typ or "INFO"
        local ts = os.date("%H:%M:%S")
        local line = string.format("[%s][%s] %s", ts, typ, tostring(msg))
        if useRcon then
            rconsoleprint(line .. "\n")
        else
            print(line)
            if typ == "ERROR" and warn then warn(line) end
        end
    end
end

local log = makeLogger()
log("Melee Finder starting...", "INFO")

-- Wait game loaded
if not game:IsLoaded() then
    log("Waiting for game to load...", "INFO")
    game.Loaded:Wait()
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer

-- Safe WaitForChild
local function safeWait(parent, childName, timeout)
    timeout = timeout or 10
    local inst = parent:FindFirstChild(childName) or parent:WaitForChild(childName, timeout)
    return inst
end

local remotes = safeWait(ReplicatedStorage, "Remotes", 10)
local CommF = remotes and remotes:FindFirstChild("CommF_")

if not CommF then
    log("CommF_ not found. Abort.", "ERROR")
    return
end

-- === Fighting Styles ===
local styles = {
    "Combat","DarkStep","Electro","WaterKungFu","DragonBreath","Superhuman",
    "DeathStep","SharkmanKarate","ElectricClaw","DragonTalon","Godhuman"
}

local alias = {
    Combat={}, DarkStep={"BuyBlackLeg"}, Electro={"BuyElectro"}, WaterKungFu={"BuyFishmanKarate"},
    DragonBreath={"BuyDragonBreath"}, Superhuman={"BuySuperhuman"}, DeathStep={"BuyDeathStep"},
    SharkmanKarate={"BuySharkmanKarate"}, ElectricClaw={"BuyElectricClaw"},
    DragonTalon={"BuyDragonTalon"}, Godhuman={"BuyGodhuman"},
}

local function normalizeOwned(result)
    if result == nil then return false end
    if result == true or result == 1 then return true end
    if type(result) == "number" then return result > 0 end
    if type(result) == "string" then
        local s = result:lower()
        return (s=="1" or s=="true" or s=="owned" or s=="success")
    end
    if type(result) == "table" then
        if result.Success==true or result.success==true then return true end
        if result[1]==true or result[1]==1 then return true end
    end
    return false
end

local function tryRemote(remoteName)
    local ok,res
    ok,res = pcall(function() return CommF:InvokeServer(remoteName,true) end)
    if ok and normalizeOwned(res) then return true end
    ok,res = pcall(function() return CommF:InvokeServer(remoteName,"Check") end)
    if ok and normalizeOwned(res) then return true end
    ok,res = pcall(function() return CommF:InvokeServer(remoteName) end)
    if ok and normalizeOwned(res) then return true end
    return false
end

local function candidateRemotes(style)
    local list = {}
    if alias[style] then
        for _,n in ipairs(alias[style]) do table.insert(list,n) end
    end
    table.insert(list,"Buy"..style)
    table.insert(list,style)
    local seen,uniq={},{}
    for _,n in ipairs(list) do
        if not seen[n] then seen[n]=true; table.insert(uniq,n) end
    end
    return uniq
end

-- Equipped style
local equippedStyle
pcall(function()
    local data = LocalPlayer:WaitForChild("Data",5)
    if data then
        local fs = data:FindFirstChild("FightingStyle")
        if fs then equippedStyle = tostring(fs.Value) end
    end
end)

-- === Scan Styles ===
log("Scanning fighting styles...", "INFO")
local owned,missing={},{}
for _,style in ipairs(styles) do
    local has = false
    if style=="Combat" then has = true end
    if not has and equippedStyle==style then has=true end
    if not has then
        for _,rname in ipairs(candidateRemotes(style)) do
            if tryRemote(rname) then has=true break end
            task.wait(0.05)
        end
    end
    if has then
        table.insert(owned,style)
        log("✅ Owned: "..style,"SUCCESS")
    else
        table.insert(missing,style)
        log("❌ Not owned: "..style,"INFO")
    end
end

-- === Player Stats ===
local dataFolder = LocalPlayer:WaitForChild("Data",5)
local level   = dataFolder and dataFolder:FindFirstChild("Level") and dataFolder.Level.Value or 0
local beli    = dataFolder and dataFolder:FindFirstChild("Beli") and dataFolder.Beli.Value or 0
local frag    = dataFolder and dataFolder:FindFirstChild("Fragments") and dataFolder.Fragments.Value or 0

log("=== Player Stats ===","INFO")
log("Level: "..level,"INFO")
log("Beli: "..beli,"INFO")
log("Fragments: "..frag,"INFO")

-- === Inventory Weapons (Sword & Gun) ===
local swords,guns = {},{}
local invOk,invRes = pcall(function() return CommF:InvokeServer("getInventoryWeapons") end)
if invOk and type(invRes)=="table" then
    for _,item in pairs(invRes) do
        if item.Type=="Sword" then
            table.insert(swords,item.Name or "?")
        elseif item.Type=="Gun" then
            table.insert(guns,item.Name or "?")
        end
    end
end

log("=== Weapons ===","INFO")
log("Swords: "..(#swords>0 and table.concat(swords,", ") or "None"),"INFO")
log("Guns: "..(#guns>0 and table.concat(guns,", ") or "None"),"INFO")

-- Export kết quả
getgenv().BloxMelee = {
    owned=owned, missing=missing, equipped=equippedStyle,
    level=level, beli=beli, fragments=frag,
    swords=swords, guns=guns
}

pcall(function()
    StarterGui:SetCore("SendNotification",{
        Title="Melee Finder",
        Text="Scan xong! Xem console / F9.",
        Duration=6
    })
end)